grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

Model:
	greetings+=AbstractElement*;
	
AbstractElement:
	'Hello' name=ID '!' | Component | Service | 
	Signature | AssemblyContext | SystemEnvironment |
	Interface | AllocationContext;

AllocationContext:
	'AllocationContext'
	'{'
		'allocatedAssemblyContext' '(' allocatedAssemblyContext+=[AssemblyContext|EString] ( "," allocatedAssemblyContext+=[AssemblyContext|EString])* ')' 
		('targetContainer' '(' targetContainer+=[Container|EString] ( "," targetContainer+=[Container|EString])* ')' )?
	'}';
	
SystemEnvironment returns SystemEnvironment:
	'SystemEnvironment'
	'{'
		'container' '{' container+=Container ( "," container+=Container)* '}' 
		('link' '(' link+=[Link|EString] ( "," link+=[Link|EString])* ')' )?
	'}';	
	
QualifiedName:
 ID ('.' ID)*;

Component:
	Component_Impl | CompositeComponent;

Container:
	'Container'
	name=ID
	'{'
		'links' '(' links+=[Link|EString] ( "," links+=[Link|EString])* ')' 
	'}';

AssemblyContext:
	'AssemblyContext'
	name=ID
	'{'
		('requiredRole' '(' requiredRole+=[Role|EString] ( "," requiredRole+=[Role|EString])* ')' )?
		('allocationContext' allocationContext=[AllocationContext|EString])?
		('providedRole' '(' providedRole+=[Role|EString] ( "," providedRole+=[Role|EString])* ')' )?
		('component' '(' component+=[Component|EString] ( "," component+=[Component|EString])* ')' )?
	'}';

Link:
	'Link'
	name=ID
	'{'
		'linkedContainers' '(' linkedContainers+=[Container|EString] ( "," linkedContainers+=[Container|EString])* ')' 
	'}';

EString returns ecore::EString:
	STRING | ID;

Role:
	{Role}
	'Role'
	;

Component_Impl returns Component:
	'Component'
	name=ID
	'{'
		('requiredInterface' '(' requiredInterface+=[Interface|EString] ( "," requiredInterface+=[Interface|EString])* ')')?
		('requiredService' '(' requiredService+=[Service|EString] ( "," requiredService+=[Service|EString])* ')')?
		('providedInterface' '(' providedInterface+=[Interface|EString] ( "," providedInterface+=[Interface|EString])* '}')?
		('providedService' '(' providedService+=[Service|EString] ( "," providedService+=[Service|EString])* ')')? 
		('behaviourDescription' behaviourDescription=BehaviorDescription)?
	'}';



BehaviorDescription:
	{BehaviorDescription}
	'BehaviorDescription'
	'{'
		('calledServices' '(' calledServices+=[Service|EString] ( "," calledServices+=[Service|EString])* ')' )?
		('internalActions' internalActions=InternalAction)?
		('loops' loops=Loop)?
		('branches' branches=Branch)?
	'}';

CompositeComponent:
	'CompositeComponent'
	name=ID
	'{'
		('requiredInterface' '(' requiredInterface+=[Interface|EString] ( "," requiredInterface+=[Interface|EString])* ')')?
		('requiredService' '(' requiredService+=[Service|EString] ( "," requiredService+=[Service|EString])* ')')?
		('providedInterface' '(' providedInterface+=[Interface|EString] ( "," providedInterface+=[Interface|EString])* '}')?
		('providedService' '(' providedService+=[Service|EString] ( "," providedService+=[Service|EString])* ')')? 
		('behaviourDescription' behaviourDescription=BehaviorDescription)?
		('encapsulatedAssemblyContext' encapsulatedAssemblyContext=AssemblyContext)?
	'}';

Service:
	'Service'
	name=ID
	'{'
		'correspondingSignature' '(' correspondingSignature+=[Signature|EString] ( "," correspondingSignature+=[Signature|EString])* ')' 
	'}';


Interface:
	'Interface'
	name=ID
	'{'
		'signature' '(' signature+=[Signature|EString] ( "," signature+=[Signature|EString])* ')' 
	'}';


//Signature:
//	'Signature'
//	name=ID
//	'{'
//		'returnType' returnType=[Type|EString]
//		('parameterType' '(' parameterType+=[Type|EString] ( "," parameterType+=[Type|EString])* ')' )?
//	'}';
	
Signature:
	'Signature'
	name=ID
	'{'
		('returnType' returnType=Type)?
		('parameterType' '(' parameterType+=[Type|EString] ( "," parameterType+=[Type|EString])* ')' )?
	'}';
	
DelegationConnector:
	'DelegationConnector'
	'{'
		'role' role=[Role|EString]
		'interface' interface=[Interface|EString]
	'}';


InternalAction:
	{InternalAction}
	'InternalAction'
	;

Loop:
	{Loop}
	'Loop'
	;

Branch:
	{Branch}
	'Branch'
	; 


Type:
	Type_Impl | List | Map | ComplexType | Date | Double | String0 | Int0 | Char | Long | Float | Boolean | Void;


Type_Impl returns Type:
	{Type}
	'Type'
	;

List:
	{List}
	'List'
	;

Map:
	{Map}
	'Map'
	;

ComplexType:
	{ComplexType}
	'ComplexType'
	;

Date:
	{Date}
	'Date'
	;

Double:
	{Double}
	'Double'
	;

String0:
	{String}
	'String'
	;

Int0:
	{Int}
	'Int'
	;

Char:
	{Char}
	'Char'
	;

Long:
	{Long}
	'Long'
	;

Float:
	{Float}
	'Float'
	;

Boolean:
	{Boolean}
	'Boolean'
	;

Void:
	{Void}
	'Void'
	;
	
