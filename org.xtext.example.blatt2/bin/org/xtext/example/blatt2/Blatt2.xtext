// automatically generated by Xtext
grammar org.xtext.example.blatt2.Blatt2 with org.eclipse.xtext.common.Terminals

import "platform:/resource/Blatt1/model/blatt1.ecore#//allocation" 
import "platform:/resource/Blatt1/model/blatt1.ecore#//environment" as Environment
import "platform:/resource/Blatt1/model/blatt1.ecore#//assembly" as Assembly
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/Blatt1/model/blatt1.ecore#//behaviour" as Behaviour
import "platform:/resource/Blatt1/model/blatt1.ecore#//repository" as Repository
import "platform:/resource/Blatt1/model/blatt1.ecore#//types" as Types

AllocationContext returns AllocationContext:
	'AllocationContext'
	'{'
		'allocatedAssemblyContext' '(' allocatedAssemblyContext+=[Assembly::AssemblyContext|EString] ( "," allocatedAssemblyContext+=[Assembly::AssemblyContext|EString])* ')' 
		('targetContainer' '{' targetContainer+=Container ( "," targetContainer+=Container)* '}' )?
	'}';





Component returns Repository::Component:
	Component_Impl | CompositeComponent;








Type returns Types::Type:
	Type_Impl | List | Map | ComplexType | Date | Double | String0 | Int0 | Char | Long | Float | Boolean | Void;

Container returns Environment::Container:
	'Container'
	name=EString
	'{'
		'links' '(' links+=[Environment::Link|EString] ( "," links+=[Environment::Link|EString])* ')' 
	'}';

AssemblyContext returns Assembly::AssemblyContext:
	'AssemblyContext'
	name=EString
	'{'
		'allocationContext' allocationContext=[AllocationContext|EString]
		('requiredRole' '{' requiredRole+=Role ( "," requiredRole+=Role)* '}' )?
		('providedRole' '{' providedRole+=Role ( "," providedRole+=Role)* '}' )?
		('component' '{' component+=Component ( "," component+=Component)* '}' )?
	'}';

Link returns Environment::Link:
	'Link'
	name=EString
	'{'
		'linkedContainers' '(' linkedContainers+=[Environment::Container|EString] ( "," linkedContainers+=[Environment::Container|EString])* ')' 
	'}';

EString returns ecore::EString:
	STRING | ID;

Role returns Assembly::Role:
	{Assembly::Role}
	'Role'
	;

Component_Impl returns Repository::Component:
	'Component'
	name=EString
	'{'
		('requiredInterface' '(' requiredInterface+=[Repository::Interface|EString] ( "," requiredInterface+=[Repository::Interface|EString])* ')' )?
		'providedService' '(' providedService+=[Repository::Service|EString] ( "," providedService+=[Repository::Service|EString])* ')' 
		('providedInterface' '{' providedInterface+=Interface ( "," providedInterface+=Interface)* '}' )?
		'requiredService' requiredService=Service
		'behaviourDescription' behaviourDescription=BehaviorDescription
	'}';

Interface returns Repository::Interface:
	'Interface'
	name=EString
	'{'
		'signature' '{' signature+=Signature ( "," signature+=Signature)* '}' 
	'}';

Service returns Repository::Service:
	'Service'
	'{'
		'correspondingSignature' '{' correspondingSignature+=Signature ( "," correspondingSignature+=Signature)* '}' 
	'}';

BehaviorDescription returns Behaviour::BehaviorDescription:
	{Behaviour::BehaviorDescription}
	'BehaviorDescription'
	'{'
		('internalActions' internalActions=[Behaviour::InternalAction|EString])?
		('loops' loops=[Behaviour::Loop|EString])?
		('branches' branches=[Behaviour::Branch|EString])?
		('calledServices' '{' calledServices+=Service ( "," calledServices+=Service)* '}' )?
	'}';

CompositeComponent returns Repository::CompositeComponent:
	'CompositeComponent'
	name=EString
	'{'
		('requiredInterface' '(' requiredInterface+=[Repository::Interface|EString] ( "," requiredInterface+=[Repository::Interface|EString])* ')' )?
		'providedService' '(' providedService+=[Repository::Service|EString] ( "," providedService+=[Repository::Service|EString])* ')' 
		('providedInterface' '{' providedInterface+=Interface ( "," providedInterface+=Interface)* '}' )?
		'requiredService' requiredService=Service
		'behaviourDescription' behaviourDescription=BehaviorDescription
		'encapsulatedAssemblyContext' encapsulatedAssemblyContext=AssemblyContext
	'}';

Signature returns Types::Signature:
	'Signature'
	name=EString
	'{'
		'returnType' returnType=[Types::Type|EString]
		('parameterType' '(' parameterType+=[Types::Type|EString] ( "," parameterType+=[Types::Type|EString])* ')' )?
	'}';

Type_Impl returns Types::Type:
	{Types::Type}
	'Type'
	;

List returns Types::List:
	{Types::List}
	'List'
	;

Map returns Types::Map:
	{Types::Map}
	'Map'
	;

ComplexType returns Types::ComplexType:
	{Types::ComplexType}
	'ComplexType'
	;

Date returns Types::Date:
	{Types::Date}
	'Date'
	;

Double returns Types::Double:
	{Types::Double}
	'Double'
	;

String0 returns Types::String:
	{Types::String}
	'String'
	;

Int0 returns Types::Int:
	{Types::Int}
	'Int'
	;

Char returns Types::Char:
	{Types::Char}
	'Char'
	;

Long returns Types::Long:
	{Types::Long}
	'Long'
	;

Float returns Types::Float:
	{Types::Float}
	'Float'
	;

Boolean returns Types::Boolean:
	{Types::Boolean}
	'Boolean'
	;

Void returns Types::Void:
	{Types::Void}
	'Void'
	;

InternalAction returns Behaviour::InternalAction:
	{Behaviour::InternalAction}
	'InternalAction'
	;

Loop returns Behaviour::Loop:
	{Behaviour::Loop}
	'Loop'
	;

Branch returns Behaviour::Branch:
	{Behaviour::Branch}
	'Branch'
	;
