/*
 * generated by Xtext 2.17.0
 */
package blatt2.serializer;

import Allocation.AllocationContext;
import Allocation.AllocationPackage;
import Assembly.AssemblyContext;
import Assembly.AssemblyPackage;
import Assembly.Role;
import Environment.Container;
import Environment.EnvironmentPackage;
import Environment.Link;
import Repository.BehaviorDescription;
import Repository.Branch;
import Repository.Char;
import Repository.ComplexType;
import Repository.Component;
import Repository.CompositeComponent;
import Repository.Date;
import Repository.Int;
import Repository.Interface;
import Repository.InternalAction;
import Repository.List;
import Repository.Loop;
import Repository.Map;
import Repository.RepositoryPackage;
import Repository.Service;
import Repository.Signature;
import Repository.Type;
import blatt2.services.Blatt2GrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class Blatt2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Blatt2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AllocationPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AllocationPackage.ALLOCATION_CONTEXT:
				sequence_AllocationContext(context, (AllocationContext) semanticObject); 
				return; 
			}
		else if (epackage == AssemblyPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AssemblyPackage.ASSEMBLY_CONTEXT:
				sequence_AssemblyContext(context, (AssemblyContext) semanticObject); 
				return; 
			case AssemblyPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			}
		else if (epackage == EnvironmentPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EnvironmentPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case EnvironmentPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			}
		else if (epackage == RepositoryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RepositoryPackage.BEHAVIOR_DESCRIPTION:
				sequence_BehaviorDescription(context, (BehaviorDescription) semanticObject); 
				return; 
			case RepositoryPackage.BOOLEAN:
				sequence_Boolean(context, (Repository.Boolean) semanticObject); 
				return; 
			case RepositoryPackage.BRANCH:
				sequence_Branch(context, (Branch) semanticObject); 
				return; 
			case RepositoryPackage.CHAR:
				sequence_Char(context, (Char) semanticObject); 
				return; 
			case RepositoryPackage.COMPLEX_TYPE:
				sequence_ComplexType(context, (ComplexType) semanticObject); 
				return; 
			case RepositoryPackage.COMPONENT:
				sequence_Component_Impl(context, (Component) semanticObject); 
				return; 
			case RepositoryPackage.COMPOSITE_COMPONENT:
				sequence_CompositeComponent(context, (CompositeComponent) semanticObject); 
				return; 
			case RepositoryPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case RepositoryPackage.DOUBLE:
				sequence_Double(context, (Repository.Double) semanticObject); 
				return; 
			case RepositoryPackage.FLOAT:
				sequence_Float(context, (Repository.Float) semanticObject); 
				return; 
			case RepositoryPackage.INT:
				sequence_Int0(context, (Int) semanticObject); 
				return; 
			case RepositoryPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case RepositoryPackage.INTERNAL_ACTION:
				sequence_InternalAction(context, (InternalAction) semanticObject); 
				return; 
			case RepositoryPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case RepositoryPackage.LONG:
				sequence_Long(context, (Repository.Long) semanticObject); 
				return; 
			case RepositoryPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case RepositoryPackage.MAP:
				sequence_Map(context, (Map) semanticObject); 
				return; 
			case RepositoryPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case RepositoryPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case RepositoryPackage.STRING:
				sequence_String0(context, (Repository.String) semanticObject); 
				return; 
			case RepositoryPackage.TYPE:
				sequence_Type_Impl(context, (Type) semanticObject); 
				return; 
			case RepositoryPackage.VOID:
				sequence_Void(context, (Repository.Void) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AllocationContext returns AllocationContext
	 *
	 * Constraint:
	 *     (
	 *         allocatedAssemblyContext+=[AssemblyContext|EString] 
	 *         allocatedAssemblyContext+=[AssemblyContext|EString]* 
	 *         (targetContainer+=Container targetContainer+=Container*)?
	 *     )
	 */
	protected void sequence_AllocationContext(ISerializationContext context, AllocationContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AssemblyContext returns AssemblyContext
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (requiredRole+=[Role|EString] requiredRole+=[Role|EString]*)? 
	 *         allocationContext=[AllocationContext|EString] 
	 *         (providedRole+=Role providedRole+=Role*)? 
	 *         (component+=Component component+=Component*)?
	 *     )
	 */
	protected void sequence_AssemblyContext(ISerializationContext context, AssemblyContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorDescription returns BehaviorDescription
	 *
	 * Constraint:
	 *     ((calledServices+=[Service|EString] calledServices+=[Service|EString]*)? internalActions=InternalAction? loops=Loop? branches=Branch?)
	 */
	protected void sequence_BehaviorDescription(ISerializationContext context, BehaviorDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Boolean
	 *     Boolean returns Boolean
	 *
	 * Constraint:
	 *     {Boolean}
	 */
	protected void sequence_Boolean(ISerializationContext context, Repository.Boolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Branch returns Branch
	 *
	 * Constraint:
	 *     {Branch}
	 */
	protected void sequence_Branch(ISerializationContext context, Branch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Char
	 *     Char returns Char
	 *
	 * Constraint:
	 *     {Char}
	 */
	protected void sequence_Char(ISerializationContext context, Char semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns ComplexType
	 *     ComplexType returns ComplexType
	 *
	 * Constraint:
	 *     {ComplexType}
	 */
	protected void sequence_ComplexType(ISerializationContext context, ComplexType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *     Component_Impl returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (requiredInterface+=[Interface|EString] requiredInterface+=[Interface|EString]*)? 
	 *         requiredService+=[Service|EString] 
	 *         requiredService+=[Service|EString]* 
	 *         (providedInterface+=Interface providedInterface+=Interface*)? 
	 *         providedService+=Service 
	 *         providedService+=Service* 
	 *         behaviourDescription=BehaviorDescription
	 *     )
	 */
	protected void sequence_Component_Impl(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns CompositeComponent
	 *     CompositeComponent returns CompositeComponent
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (requiredInterface+=[Interface|EString] requiredInterface+=[Interface|EString]*)? 
	 *         requiredService+=[Service|EString] 
	 *         requiredService+=[Service|EString]* 
	 *         (providedInterface+=Interface providedInterface+=Interface*)? 
	 *         providedService+=Service 
	 *         providedService+=Service* 
	 *         behaviourDescription=BehaviorDescription 
	 *         encapsulatedAssemblyContext=AssemblyContext
	 *     )
	 */
	protected void sequence_CompositeComponent(ISerializationContext context, CompositeComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (name=EString links+=[Link|EString] links+=[Link|EString]*)
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Date
	 *     Date returns Date
	 *
	 * Constraint:
	 *     {Date}
	 */
	protected void sequence_Date(ISerializationContext context, Date semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Double
	 *     Double returns Double
	 *
	 * Constraint:
	 *     {Double}
	 */
	protected void sequence_Double(ISerializationContext context, Repository.Double semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Float
	 *     Float returns Float
	 *
	 * Constraint:
	 *     {Float}
	 */
	protected void sequence_Float(ISerializationContext context, Repository.Float semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Int
	 *     Int0 returns Int
	 *
	 * Constraint:
	 *     {Int}
	 */
	protected void sequence_Int0(ISerializationContext context, Int semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (name=EString signature+=Signature signature+=Signature*)
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalAction returns InternalAction
	 *
	 * Constraint:
	 *     {InternalAction}
	 */
	protected void sequence_InternalAction(ISerializationContext context, InternalAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=EString linkedContainers+=[Container|EString] linkedContainers+=[Container|EString]*)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns List
	 *     List returns List
	 *
	 * Constraint:
	 *     {List}
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Long
	 *     Long returns Long
	 *
	 * Constraint:
	 *     {Long}
	 */
	protected void sequence_Long(ISerializationContext context, Repository.Long semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loop returns Loop
	 *
	 * Constraint:
	 *     {Loop}
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Map
	 *     Map returns Map
	 *
	 * Constraint:
	 *     {Map}
	 */
	protected void sequence_Map(ISerializationContext context, Map semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Role returns Role
	 *
	 * Constraint:
	 *     {Role}
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (name=EString correspondingSignature+=Signature correspondingSignature+=Signature*)
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (name=EString returnType=[Type|EString] (parameterType+=[Type|EString] parameterType+=[Type|EString]*)?)
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns String
	 *     String0 returns String
	 *
	 * Constraint:
	 *     {String}
	 */
	protected void sequence_String0(ISerializationContext context, Repository.String semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *     Type_Impl returns Type
	 *
	 * Constraint:
	 *     {Type}
	 */
	protected void sequence_Type_Impl(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Void
	 *     Void returns Void
	 *
	 * Constraint:
	 *     {Void}
	 */
	protected void sequence_Void(ISerializationContext context, Repository.Void semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
