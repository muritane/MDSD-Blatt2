// automatically generated by Xtext
grammar blatt2.Blatt2 with org.eclipse.xtext.common.Terminals

//import "platform:/resource/Blatt1/model/assembly.ecore#//assembly" 
import "platform:/resource/Blatt1/model/repository.ecore#//repository" as Repository
import "platform:/resource/Blatt1/model/allocation.ecore#//allocation" as Allocation
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/Blatt1/model/environment.ecore#//environment" as Environment
import "platform:/resource/Blatt1/model/assembly.ecore#//assembly" as Assembly

AllocationContext returns Allocation::AllocationContext:
	'AllocationContext'
	'{'
		'allocatedAssemblyContext' '(' allocatedAssemblyContext+=[Assembly::AssemblyContext|EString] ( "," allocatedAssemblyContext+=[Assembly::AssemblyContext|EString])* ')' 
		('targetContainer' '{' targetContainer+=Container ( "," targetContainer+=Container)* '}' )?
	'}';





Component returns Repository::Component:
	Component_Impl | CompositeComponent;








Type returns Repository::Type:
	Type_Impl | List | Map | ComplexType | Date | Double | String0 | Int0 | Char | Long | Float | Boolean | Void;

Container returns Environment::Container:
	'Container'
	name=EString
	'{'
		'links' '(' links+=[Environment::Link|EString] ( "," links+=[Environment::Link|EString])* ')' 
	'}';

AssemblyContext returns Assembly::AssemblyContext:
	'AssemblyContext'
	name=EString
	'{'
		('requiredRole' '(' requiredRole+=[Assembly::Role|EString] ( "," requiredRole+=[Assembly::Role|EString])* ')' )?
		'allocationContext' allocationContext=[Allocation::AllocationContext|EString]
		('providedRole' '{' providedRole+=Role ( "," providedRole+=Role)* '}' )?
		('component' '{' component+=Component ( "," component+=Component)* '}' )?
	'}';

Link returns Environment::Link:
	'Link'
	name=EString
	'{'
		'linkedContainers' '(' linkedContainers+=[Environment::Container|EString] ( "," linkedContainers+=[Environment::Container|EString])* ')' 
	'}';

EString returns ecore::EString:
	STRING | ID;

Role returns Assembly::Role:
	{Assembly::Role}
	'Role'
	;

Component_Impl returns Repository::Component:
	'Component'
	name=EString
	'{'
		('requiredInterface' '(' requiredInterface+=[Repository::Interface|EString] ( "," requiredInterface+=[Repository::Interface|EString])* ')' )?
		'requiredService' '(' requiredService+=[Repository::Service|EString] ( "," requiredService+=[Repository::Service|EString])* ')' 
		('providedInterface' '{' providedInterface+=Interface ( "," providedInterface+=Interface)* '}' )?
		'providedService' '{' providedService+=Service ( "," providedService+=Service)* '}' 
		'behaviourDescription' behaviourDescription=BehaviorDescription
	'}';

Interface returns Repository::Interface:
	'Interface'
	name=EString
	'{'
		'signature' '{' signature+=Signature ( "," signature+=Signature)* '}' 
	'}';

Service returns Repository::Service:
	'Service'
	name=EString
	'{'
		'correspondingSignature' '{' correspondingSignature+=Signature ( "," correspondingSignature+=Signature)* '}' 
	'}';

BehaviorDescription returns Repository::BehaviorDescription:
	{Repository::BehaviorDescription}
	'BehaviorDescription'
	'{'
		('calledServices' '(' calledServices+=[Repository::Service|EString] ( "," calledServices+=[Repository::Service|EString])* ')' )?
		('internalActions' internalActions=InternalAction)?
		('loops' loops=Loop)?
		('branches' branches=Branch)?
	'}';

CompositeComponent returns Repository::CompositeComponent:
	'CompositeComponent'
	name=EString
	'{'
		('requiredInterface' '(' requiredInterface+=[Repository::Interface|EString] ( "," requiredInterface+=[Repository::Interface|EString])* ')' )?
		'requiredService' '(' requiredService+=[Repository::Service|EString] ( "," requiredService+=[Repository::Service|EString])* ')' 
		('providedInterface' '{' providedInterface+=Interface ( "," providedInterface+=Interface)* '}' )?
		'providedService' '{' providedService+=Service ( "," providedService+=Service)* '}' 
		'behaviourDescription' behaviourDescription=BehaviorDescription
		'encapsulatedAssemblyContext' encapsulatedAssemblyContext=AssemblyContext
	'}';

Signature returns Repository::Signature:
	'Signature'
	name=EString
	'{'
		'returnType' returnType=[Repository::Type|EString]
		('parameterType' '(' parameterType+=[Repository::Type|EString] ( "," parameterType+=[Repository::Type|EString])* ')' )?
	'}';

Type_Impl returns Repository::Type:
	{Repository::Type}
	'Type'
	;

List returns Repository::List:
	{Repository::List}
	'List'
	;

Map returns Repository::Map:
	{Repository::Map}
	'Map'
	;

ComplexType returns Repository::ComplexType:
	{Repository::ComplexType}
	'ComplexType'
	;

Date returns Repository::Date:
	{Repository::Date}
	'Date'
	;

Double returns Repository::Double:
	{Repository::Double}
	'Double'
	;

String0 returns Repository::String:
	{Repository::String}
	'String'
	;

Int0 returns Repository::Int:
	{Repository::Int}
	'Int'
	;

Char returns Repository::Char:
	{Repository::Char}
	'Char'
	;

Long returns Repository::Long:
	{Repository::Long}
	'Long'
	;

Float returns Repository::Float:
	{Repository::Float}
	'Float'
	;

Boolean returns Repository::Boolean:
	{Repository::Boolean}
	'Boolean'
	;

Void returns Repository::Void:
	{Repository::Void}
	'Void'
	;

InternalAction returns Repository::InternalAction:
	{Repository::InternalAction}
	'InternalAction'
	;

Loop returns Repository::Loop:
	{Repository::Loop}
	'Loop'
	;

Branch returns Repository::Branch:
	{Repository::Branch}
	'Branch'
	;
