/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.myDsl.AllocationContext;
import org.xtext.example.mydsl.myDsl.AssemblyContext;
import org.xtext.example.mydsl.myDsl.Interface;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.SystemEnvironment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getEncapsulatedAssemblyContext <em>Encapsulated Assembly Context</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getAllocationContext <em>Allocation Context</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getProvidedInterfaces <em>Provided Interfaces</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getEnvironment <em>Environment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SystemImpl extends AbstractElementImpl implements org.xtext.example.mydsl.myDsl.System
{
  /**
   * The cached value of the '{@link #getEncapsulatedAssemblyContext() <em>Encapsulated Assembly Context</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEncapsulatedAssemblyContext()
   * @generated
   * @ordered
   */
  protected EList<AssemblyContext> encapsulatedAssemblyContext;

  /**
   * The cached value of the '{@link #getAllocationContext() <em>Allocation Context</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllocationContext()
   * @generated
   * @ordered
   */
  protected AllocationContext allocationContext;

  /**
   * The cached value of the '{@link #getProvidedInterfaces() <em>Provided Interfaces</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProvidedInterfaces()
   * @generated
   * @ordered
   */
  protected EList<Interface> providedInterfaces;

  /**
   * The cached value of the '{@link #getEnvironment() <em>Environment</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvironment()
   * @generated
   * @ordered
   */
  protected SystemEnvironment environment;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SystemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SYSTEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AssemblyContext> getEncapsulatedAssemblyContext()
  {
    if (encapsulatedAssemblyContext == null)
    {
      encapsulatedAssemblyContext = new EObjectResolvingEList<AssemblyContext>(AssemblyContext.class, this, MyDslPackage.SYSTEM__ENCAPSULATED_ASSEMBLY_CONTEXT);
    }
    return encapsulatedAssemblyContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllocationContext getAllocationContext()
  {
    if (allocationContext != null && allocationContext.eIsProxy())
    {
      InternalEObject oldAllocationContext = (InternalEObject)allocationContext;
      allocationContext = (AllocationContext)eResolveProxy(oldAllocationContext);
      if (allocationContext != oldAllocationContext)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.SYSTEM__ALLOCATION_CONTEXT, oldAllocationContext, allocationContext));
      }
    }
    return allocationContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllocationContext basicGetAllocationContext()
  {
    return allocationContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAllocationContext(AllocationContext newAllocationContext)
  {
    AllocationContext oldAllocationContext = allocationContext;
    allocationContext = newAllocationContext;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SYSTEM__ALLOCATION_CONTEXT, oldAllocationContext, allocationContext));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Interface> getProvidedInterfaces()
  {
    if (providedInterfaces == null)
    {
      providedInterfaces = new EObjectResolvingEList<Interface>(Interface.class, this, MyDslPackage.SYSTEM__PROVIDED_INTERFACES);
    }
    return providedInterfaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemEnvironment getEnvironment()
  {
    if (environment != null && environment.eIsProxy())
    {
      InternalEObject oldEnvironment = (InternalEObject)environment;
      environment = (SystemEnvironment)eResolveProxy(oldEnvironment);
      if (environment != oldEnvironment)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.SYSTEM__ENVIRONMENT, oldEnvironment, environment));
      }
    }
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemEnvironment basicGetEnvironment()
  {
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnvironment(SystemEnvironment newEnvironment)
  {
    SystemEnvironment oldEnvironment = environment;
    environment = newEnvironment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SYSTEM__ENVIRONMENT, oldEnvironment, environment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__ENCAPSULATED_ASSEMBLY_CONTEXT:
        return getEncapsulatedAssemblyContext();
      case MyDslPackage.SYSTEM__ALLOCATION_CONTEXT:
        if (resolve) return getAllocationContext();
        return basicGetAllocationContext();
      case MyDslPackage.SYSTEM__PROVIDED_INTERFACES:
        return getProvidedInterfaces();
      case MyDslPackage.SYSTEM__ENVIRONMENT:
        if (resolve) return getEnvironment();
        return basicGetEnvironment();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__ENCAPSULATED_ASSEMBLY_CONTEXT:
        getEncapsulatedAssemblyContext().clear();
        getEncapsulatedAssemblyContext().addAll((Collection<? extends AssemblyContext>)newValue);
        return;
      case MyDslPackage.SYSTEM__ALLOCATION_CONTEXT:
        setAllocationContext((AllocationContext)newValue);
        return;
      case MyDslPackage.SYSTEM__PROVIDED_INTERFACES:
        getProvidedInterfaces().clear();
        getProvidedInterfaces().addAll((Collection<? extends Interface>)newValue);
        return;
      case MyDslPackage.SYSTEM__ENVIRONMENT:
        setEnvironment((SystemEnvironment)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__ENCAPSULATED_ASSEMBLY_CONTEXT:
        getEncapsulatedAssemblyContext().clear();
        return;
      case MyDslPackage.SYSTEM__ALLOCATION_CONTEXT:
        setAllocationContext((AllocationContext)null);
        return;
      case MyDslPackage.SYSTEM__PROVIDED_INTERFACES:
        getProvidedInterfaces().clear();
        return;
      case MyDslPackage.SYSTEM__ENVIRONMENT:
        setEnvironment((SystemEnvironment)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__ENCAPSULATED_ASSEMBLY_CONTEXT:
        return encapsulatedAssemblyContext != null && !encapsulatedAssemblyContext.isEmpty();
      case MyDslPackage.SYSTEM__ALLOCATION_CONTEXT:
        return allocationContext != null;
      case MyDslPackage.SYSTEM__PROVIDED_INTERFACES:
        return providedInterfaces != null && !providedInterfaces.isEmpty();
      case MyDslPackage.SYSTEM__ENVIRONMENT:
        return environment != null;
    }
    return super.eIsSet(featureID);
  }

} //SystemImpl
