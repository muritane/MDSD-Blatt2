/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.myDsl.AssemblyContext;
import org.xtext.example.mydsl.myDsl.BehaviorDescription;
import org.xtext.example.mydsl.myDsl.Component;
import org.xtext.example.mydsl.myDsl.Interface;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Service;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ComponentImpl#getRequiredInterface <em>Required Interface</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ComponentImpl#getRequiredService <em>Required Service</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ComponentImpl#getProvidedInterface <em>Provided Interface</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ComponentImpl#getProvidedService <em>Provided Service</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ComponentImpl#getBehaviourDescription <em>Behaviour Description</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ComponentImpl#getEncapsulatedAssemblyContext <em>Encapsulated Assembly Context</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentImpl extends AbstractElementImpl implements Component
{
  /**
   * The cached value of the '{@link #getRequiredInterface() <em>Required Interface</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiredInterface()
   * @generated
   * @ordered
   */
  protected EList<Interface> requiredInterface;

  /**
   * The cached value of the '{@link #getRequiredService() <em>Required Service</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiredService()
   * @generated
   * @ordered
   */
  protected EList<Service> requiredService;

  /**
   * The cached value of the '{@link #getProvidedInterface() <em>Provided Interface</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProvidedInterface()
   * @generated
   * @ordered
   */
  protected EList<Interface> providedInterface;

  /**
   * The cached value of the '{@link #getProvidedService() <em>Provided Service</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProvidedService()
   * @generated
   * @ordered
   */
  protected EList<Service> providedService;

  /**
   * The cached value of the '{@link #getBehaviourDescription() <em>Behaviour Description</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehaviourDescription()
   * @generated
   * @ordered
   */
  protected BehaviorDescription behaviourDescription;

  /**
   * The cached value of the '{@link #getEncapsulatedAssemblyContext() <em>Encapsulated Assembly Context</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEncapsulatedAssemblyContext()
   * @generated
   * @ordered
   */
  protected AssemblyContext encapsulatedAssemblyContext;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Interface> getRequiredInterface()
  {
    if (requiredInterface == null)
    {
      requiredInterface = new EObjectResolvingEList<Interface>(Interface.class, this, MyDslPackage.COMPONENT__REQUIRED_INTERFACE);
    }
    return requiredInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Service> getRequiredService()
  {
    if (requiredService == null)
    {
      requiredService = new EObjectResolvingEList<Service>(Service.class, this, MyDslPackage.COMPONENT__REQUIRED_SERVICE);
    }
    return requiredService;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Interface> getProvidedInterface()
  {
    if (providedInterface == null)
    {
      providedInterface = new EObjectResolvingEList<Interface>(Interface.class, this, MyDslPackage.COMPONENT__PROVIDED_INTERFACE);
    }
    return providedInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Service> getProvidedService()
  {
    if (providedService == null)
    {
      providedService = new EObjectResolvingEList<Service>(Service.class, this, MyDslPackage.COMPONENT__PROVIDED_SERVICE);
    }
    return providedService;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorDescription getBehaviourDescription()
  {
    return behaviourDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBehaviourDescription(BehaviorDescription newBehaviourDescription, NotificationChain msgs)
  {
    BehaviorDescription oldBehaviourDescription = behaviourDescription;
    behaviourDescription = newBehaviourDescription;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION, oldBehaviourDescription, newBehaviourDescription);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBehaviourDescription(BehaviorDescription newBehaviourDescription)
  {
    if (newBehaviourDescription != behaviourDescription)
    {
      NotificationChain msgs = null;
      if (behaviourDescription != null)
        msgs = ((InternalEObject)behaviourDescription).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION, null, msgs);
      if (newBehaviourDescription != null)
        msgs = ((InternalEObject)newBehaviourDescription).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION, null, msgs);
      msgs = basicSetBehaviourDescription(newBehaviourDescription, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION, newBehaviourDescription, newBehaviourDescription));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssemblyContext getEncapsulatedAssemblyContext()
  {
    return encapsulatedAssemblyContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEncapsulatedAssemblyContext(AssemblyContext newEncapsulatedAssemblyContext, NotificationChain msgs)
  {
    AssemblyContext oldEncapsulatedAssemblyContext = encapsulatedAssemblyContext;
    encapsulatedAssemblyContext = newEncapsulatedAssemblyContext;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT, oldEncapsulatedAssemblyContext, newEncapsulatedAssemblyContext);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEncapsulatedAssemblyContext(AssemblyContext newEncapsulatedAssemblyContext)
  {
    if (newEncapsulatedAssemblyContext != encapsulatedAssemblyContext)
    {
      NotificationChain msgs = null;
      if (encapsulatedAssemblyContext != null)
        msgs = ((InternalEObject)encapsulatedAssemblyContext).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT, null, msgs);
      if (newEncapsulatedAssemblyContext != null)
        msgs = ((InternalEObject)newEncapsulatedAssemblyContext).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT, null, msgs);
      msgs = basicSetEncapsulatedAssemblyContext(newEncapsulatedAssemblyContext, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT, newEncapsulatedAssemblyContext, newEncapsulatedAssemblyContext));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION:
        return basicSetBehaviourDescription(null, msgs);
      case MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT:
        return basicSetEncapsulatedAssemblyContext(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPONENT__REQUIRED_INTERFACE:
        return getRequiredInterface();
      case MyDslPackage.COMPONENT__REQUIRED_SERVICE:
        return getRequiredService();
      case MyDslPackage.COMPONENT__PROVIDED_INTERFACE:
        return getProvidedInterface();
      case MyDslPackage.COMPONENT__PROVIDED_SERVICE:
        return getProvidedService();
      case MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION:
        return getBehaviourDescription();
      case MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT:
        return getEncapsulatedAssemblyContext();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPONENT__REQUIRED_INTERFACE:
        getRequiredInterface().clear();
        getRequiredInterface().addAll((Collection<? extends Interface>)newValue);
        return;
      case MyDslPackage.COMPONENT__REQUIRED_SERVICE:
        getRequiredService().clear();
        getRequiredService().addAll((Collection<? extends Service>)newValue);
        return;
      case MyDslPackage.COMPONENT__PROVIDED_INTERFACE:
        getProvidedInterface().clear();
        getProvidedInterface().addAll((Collection<? extends Interface>)newValue);
        return;
      case MyDslPackage.COMPONENT__PROVIDED_SERVICE:
        getProvidedService().clear();
        getProvidedService().addAll((Collection<? extends Service>)newValue);
        return;
      case MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION:
        setBehaviourDescription((BehaviorDescription)newValue);
        return;
      case MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT:
        setEncapsulatedAssemblyContext((AssemblyContext)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPONENT__REQUIRED_INTERFACE:
        getRequiredInterface().clear();
        return;
      case MyDslPackage.COMPONENT__REQUIRED_SERVICE:
        getRequiredService().clear();
        return;
      case MyDslPackage.COMPONENT__PROVIDED_INTERFACE:
        getProvidedInterface().clear();
        return;
      case MyDslPackage.COMPONENT__PROVIDED_SERVICE:
        getProvidedService().clear();
        return;
      case MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION:
        setBehaviourDescription((BehaviorDescription)null);
        return;
      case MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT:
        setEncapsulatedAssemblyContext((AssemblyContext)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMPONENT__REQUIRED_INTERFACE:
        return requiredInterface != null && !requiredInterface.isEmpty();
      case MyDslPackage.COMPONENT__REQUIRED_SERVICE:
        return requiredService != null && !requiredService.isEmpty();
      case MyDslPackage.COMPONENT__PROVIDED_INTERFACE:
        return providedInterface != null && !providedInterface.isEmpty();
      case MyDslPackage.COMPONENT__PROVIDED_SERVICE:
        return providedService != null && !providedService.isEmpty();
      case MyDslPackage.COMPONENT__BEHAVIOUR_DESCRIPTION:
        return behaviourDescription != null;
      case MyDslPackage.COMPONENT__ENCAPSULATED_ASSEMBLY_CONTEXT:
        return encapsulatedAssemblyContext != null;
    }
    return super.eIsSet(featureID);
  }

} //ComponentImpl
