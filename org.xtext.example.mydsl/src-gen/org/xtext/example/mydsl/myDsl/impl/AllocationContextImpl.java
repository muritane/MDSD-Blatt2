/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.myDsl.AllocationContext;
import org.xtext.example.mydsl.myDsl.AssemblyContext;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Allocation Context</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AllocationContextImpl#getAllocatedAssemblyContext <em>Allocated Assembly Context</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AllocationContextImpl#getTargetContainer <em>Target Container</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AllocationContextImpl extends AbstractElementImpl implements AllocationContext
{
  /**
   * The cached value of the '{@link #getAllocatedAssemblyContext() <em>Allocated Assembly Context</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllocatedAssemblyContext()
   * @generated
   * @ordered
   */
  protected EList<AssemblyContext> allocatedAssemblyContext;

  /**
   * The cached value of the '{@link #getTargetContainer() <em>Target Container</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargetContainer()
   * @generated
   * @ordered
   */
  protected EList<org.xtext.example.mydsl.myDsl.Container> targetContainer;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AllocationContextImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.ALLOCATION_CONTEXT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AssemblyContext> getAllocatedAssemblyContext()
  {
    if (allocatedAssemblyContext == null)
    {
      allocatedAssemblyContext = new EObjectResolvingEList<AssemblyContext>(AssemblyContext.class, this, MyDslPackage.ALLOCATION_CONTEXT__ALLOCATED_ASSEMBLY_CONTEXT);
    }
    return allocatedAssemblyContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<org.xtext.example.mydsl.myDsl.Container> getTargetContainer()
  {
    if (targetContainer == null)
    {
      targetContainer = new EObjectResolvingEList<org.xtext.example.mydsl.myDsl.Container>(org.xtext.example.mydsl.myDsl.Container.class, this, MyDslPackage.ALLOCATION_CONTEXT__TARGET_CONTAINER);
    }
    return targetContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.ALLOCATION_CONTEXT__ALLOCATED_ASSEMBLY_CONTEXT:
        return getAllocatedAssemblyContext();
      case MyDslPackage.ALLOCATION_CONTEXT__TARGET_CONTAINER:
        return getTargetContainer();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.ALLOCATION_CONTEXT__ALLOCATED_ASSEMBLY_CONTEXT:
        getAllocatedAssemblyContext().clear();
        getAllocatedAssemblyContext().addAll((Collection<? extends AssemblyContext>)newValue);
        return;
      case MyDslPackage.ALLOCATION_CONTEXT__TARGET_CONTAINER:
        getTargetContainer().clear();
        getTargetContainer().addAll((Collection<? extends org.xtext.example.mydsl.myDsl.Container>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ALLOCATION_CONTEXT__ALLOCATED_ASSEMBLY_CONTEXT:
        getAllocatedAssemblyContext().clear();
        return;
      case MyDslPackage.ALLOCATION_CONTEXT__TARGET_CONTAINER:
        getTargetContainer().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ALLOCATION_CONTEXT__ALLOCATED_ASSEMBLY_CONTEXT:
        return allocatedAssemblyContext != null && !allocatedAssemblyContext.isEmpty();
      case MyDslPackage.ALLOCATION_CONTEXT__TARGET_CONTAINER:
        return targetContainer != null && !targetContainer.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AllocationContextImpl
