/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.myDsl.Link;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.LinkImpl#getLinkedContainers <em>Linked Containers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LinkImpl extends AbstractElementImpl implements Link
{
  /**
   * The cached value of the '{@link #getLinkedContainers() <em>Linked Containers</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkedContainers()
   * @generated
   * @ordered
   */
  protected EList<org.xtext.example.mydsl.myDsl.Container> linkedContainers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<org.xtext.example.mydsl.myDsl.Container> getLinkedContainers()
  {
    if (linkedContainers == null)
    {
      linkedContainers = new EObjectResolvingEList<org.xtext.example.mydsl.myDsl.Container>(org.xtext.example.mydsl.myDsl.Container.class, this, MyDslPackage.LINK__LINKED_CONTAINERS);
    }
    return linkedContainers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.LINK__LINKED_CONTAINERS:
        return getLinkedContainers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.LINK__LINKED_CONTAINERS:
        getLinkedContainers().clear();
        getLinkedContainers().addAll((Collection<? extends org.xtext.example.mydsl.myDsl.Container>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LINK__LINKED_CONTAINERS:
        getLinkedContainers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LINK__LINKED_CONTAINERS:
        return linkedContainers != null && !linkedContainers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //LinkImpl
