/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.AbstractElement;
import org.xtext.example.mydsl.myDsl.AllocationContext;
import org.xtext.example.mydsl.myDsl.AssemblyContext;
import org.xtext.example.mydsl.myDsl.BehaviorDescription;
import org.xtext.example.mydsl.myDsl.Branch;
import org.xtext.example.mydsl.myDsl.Char;
import org.xtext.example.mydsl.myDsl.ComplexType;
import org.xtext.example.mydsl.myDsl.Component;
import org.xtext.example.mydsl.myDsl.Date;
import org.xtext.example.mydsl.myDsl.DelegationConnector;
import org.xtext.example.mydsl.myDsl.Int;
import org.xtext.example.mydsl.myDsl.Int0;
import org.xtext.example.mydsl.myDsl.Interface;
import org.xtext.example.mydsl.myDsl.InternalAction;
import org.xtext.example.mydsl.myDsl.Link;
import org.xtext.example.mydsl.myDsl.List;
import org.xtext.example.mydsl.myDsl.Loop;
import org.xtext.example.mydsl.myDsl.Map;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslFactory;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Role;
import org.xtext.example.mydsl.myDsl.Service;
import org.xtext.example.mydsl.myDsl.Signature;
import org.xtext.example.mydsl.myDsl.String0;
import org.xtext.example.mydsl.myDsl.SystemEnvironment;
import org.xtext.example.mydsl.myDsl.Type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.MODEL: return createModel();
      case MyDslPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case MyDslPackage.ALLOCATION_CONTEXT: return createAllocationContext();
      case MyDslPackage.SYSTEM_ENVIRONMENT: return createSystemEnvironment();
      case MyDslPackage.COMPONENT: return createComponent();
      case MyDslPackage.CONTAINER: return createContainer();
      case MyDslPackage.SYSTEM: return createSystem();
      case MyDslPackage.ASSEMBLY_CONTEXT: return createAssemblyContext();
      case MyDslPackage.LINK: return createLink();
      case MyDslPackage.ROLE: return createRole();
      case MyDslPackage.BEHAVIOR_DESCRIPTION: return createBehaviorDescription();
      case MyDslPackage.SERVICE: return createService();
      case MyDslPackage.INTERFACE: return createInterface();
      case MyDslPackage.SIGNATURE: return createSignature();
      case MyDslPackage.DELEGATION_CONNECTOR: return createDelegationConnector();
      case MyDslPackage.INTERNAL_ACTION: return createInternalAction();
      case MyDslPackage.LOOP: return createLoop();
      case MyDslPackage.BRANCH: return createBranch();
      case MyDslPackage.TYPE: return createType();
      case MyDslPackage.LIST: return createList();
      case MyDslPackage.MAP: return createMap();
      case MyDslPackage.COMPLEX_TYPE: return createComplexType();
      case MyDslPackage.DATE: return createDate();
      case MyDslPackage.DOUBLE: return createDouble();
      case MyDslPackage.STRING0: return createString0();
      case MyDslPackage.INT0: return createInt0();
      case MyDslPackage.CHAR: return createChar();
      case MyDslPackage.LONG: return createLong();
      case MyDslPackage.FLOAT: return createFloat();
      case MyDslPackage.BOOLEAN: return createBoolean();
      case MyDslPackage.VOID: return createVoid();
      case MyDslPackage.STRING: return createString();
      case MyDslPackage.INT: return createInt();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllocationContext createAllocationContext()
  {
    AllocationContextImpl allocationContext = new AllocationContextImpl();
    return allocationContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemEnvironment createSystemEnvironment()
  {
    SystemEnvironmentImpl systemEnvironment = new SystemEnvironmentImpl();
    return systemEnvironment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.Container createContainer()
  {
    ContainerImpl container = new ContainerImpl();
    return container;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.System createSystem()
  {
    SystemImpl system = new SystemImpl();
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssemblyContext createAssemblyContext()
  {
    AssemblyContextImpl assemblyContext = new AssemblyContextImpl();
    return assemblyContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Link createLink()
  {
    LinkImpl link = new LinkImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Role createRole()
  {
    RoleImpl role = new RoleImpl();
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorDescription createBehaviorDescription()
  {
    BehaviorDescriptionImpl behaviorDescription = new BehaviorDescriptionImpl();
    return behaviorDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service createService()
  {
    ServiceImpl service = new ServiceImpl();
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interface createInterface()
  {
    InterfaceImpl interface_ = new InterfaceImpl();
    return interface_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signature createSignature()
  {
    SignatureImpl signature = new SignatureImpl();
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DelegationConnector createDelegationConnector()
  {
    DelegationConnectorImpl delegationConnector = new DelegationConnectorImpl();
    return delegationConnector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InternalAction createInternalAction()
  {
    InternalActionImpl internalAction = new InternalActionImpl();
    return internalAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Loop createLoop()
  {
    LoopImpl loop = new LoopImpl();
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Branch createBranch()
  {
    BranchImpl branch = new BranchImpl();
    return branch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexType createComplexType()
  {
    ComplexTypeImpl complexType = new ComplexTypeImpl();
    return complexType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Date createDate()
  {
    DateImpl date = new DateImpl();
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.Double createDouble()
  {
    DoubleImpl double_ = new DoubleImpl();
    return double_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String0 createString0()
  {
    String0Impl string0 = new String0Impl();
    return string0;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Int0 createInt0()
  {
    Int0Impl int0 = new Int0Impl();
    return int0;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Char createChar()
  {
    CharImpl char_ = new CharImpl();
    return char_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.Long createLong()
  {
    LongImpl long_ = new LongImpl();
    return long_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.Float createFloat()
  {
    FloatImpl float_ = new FloatImpl();
    return float_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.Void createVoid()
  {
    VoidImpl void_ = new VoidImpl();
    return void_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.String createString()
  {
    StringImpl string = new StringImpl();
    return string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Int createInt()
  {
    IntImpl int_ = new IntImpl();
    return int_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
