/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.AbstractElement;
import org.xtext.example.mydsl.myDsl.AllocationContext;
import org.xtext.example.mydsl.myDsl.AssemblyContext;
import org.xtext.example.mydsl.myDsl.BehaviorDescription;
import org.xtext.example.mydsl.myDsl.Branch;
import org.xtext.example.mydsl.myDsl.Char;
import org.xtext.example.mydsl.myDsl.ComplexType;
import org.xtext.example.mydsl.myDsl.Component;
import org.xtext.example.mydsl.myDsl.Container;
import org.xtext.example.mydsl.myDsl.Date;
import org.xtext.example.mydsl.myDsl.DelegationConnector;
import org.xtext.example.mydsl.myDsl.Int;
import org.xtext.example.mydsl.myDsl.Interface;
import org.xtext.example.mydsl.myDsl.InternalAction;
import org.xtext.example.mydsl.myDsl.Link;
import org.xtext.example.mydsl.myDsl.List;
import org.xtext.example.mydsl.myDsl.Loop;
import org.xtext.example.mydsl.myDsl.Map;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Role;
import org.xtext.example.mydsl.myDsl.Service;
import org.xtext.example.mydsl.myDsl.Signature;
import org.xtext.example.mydsl.myDsl.SystemEnvironment;
import org.xtext.example.mydsl.myDsl.Type;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ABSTRACT_ELEMENT:
				sequence_AbstractElement(context, (AbstractElement) semanticObject); 
				return; 
			case MyDslPackage.ALLOCATION_CONTEXT:
				sequence_AllocationContext(context, (AllocationContext) semanticObject); 
				return; 
			case MyDslPackage.ASSEMBLY_CONTEXT:
				sequence_AssemblyContext(context, (AssemblyContext) semanticObject); 
				return; 
			case MyDslPackage.BEHAVIOR_DESCRIPTION:
				sequence_BehaviorDescription(context, (BehaviorDescription) semanticObject); 
				return; 
			case MyDslPackage.BOOLEAN:
				sequence_Boolean(context, (org.xtext.example.mydsl.myDsl.Boolean) semanticObject); 
				return; 
			case MyDslPackage.BRANCH:
				sequence_Branch(context, (Branch) semanticObject); 
				return; 
			case MyDslPackage.CHAR:
				sequence_Char(context, (Char) semanticObject); 
				return; 
			case MyDslPackage.COMPLEX_TYPE:
				sequence_ComplexType(context, (ComplexType) semanticObject); 
				return; 
			case MyDslPackage.COMPONENT:
				if (rule == grammarAccess.getComponent_ImplRule()) {
					sequence_Component_Impl(context, (Component) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAbstractElementRule()
						|| rule == grammarAccess.getComponentRule()) {
					sequence_Component_Impl_CompositeComponent(context, (Component) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCompositeComponentRule()) {
					sequence_CompositeComponent(context, (Component) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case MyDslPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case MyDslPackage.DELEGATION_CONNECTOR:
				sequence_DelegationConnector(context, (DelegationConnector) semanticObject); 
				return; 
			case MyDslPackage.DOUBLE:
				sequence_Double(context, (org.xtext.example.mydsl.myDsl.Double) semanticObject); 
				return; 
			case MyDslPackage.FLOAT:
				sequence_Float(context, (org.xtext.example.mydsl.myDsl.Float) semanticObject); 
				return; 
			case MyDslPackage.INT:
				sequence_Int0(context, (Int) semanticObject); 
				return; 
			case MyDslPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case MyDslPackage.INTERNAL_ACTION:
				sequence_InternalAction(context, (InternalAction) semanticObject); 
				return; 
			case MyDslPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case MyDslPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case MyDslPackage.LONG:
				sequence_Long(context, (org.xtext.example.mydsl.myDsl.Long) semanticObject); 
				return; 
			case MyDslPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case MyDslPackage.MAP:
				sequence_Map(context, (Map) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case MyDslPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case MyDslPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case MyDslPackage.STRING:
				sequence_String0(context, (org.xtext.example.mydsl.myDsl.String) semanticObject); 
				return; 
			case MyDslPackage.SYSTEM:
				sequence_System(context, (org.xtext.example.mydsl.myDsl.System) semanticObject); 
				return; 
			case MyDslPackage.SYSTEM_ENVIRONMENT:
				sequence_SystemEnvironment(context, (SystemEnvironment) semanticObject); 
				return; 
			case MyDslPackage.TYPE:
				sequence_Type_Impl(context, (Type) semanticObject); 
				return; 
			case MyDslPackage.VOID:
				sequence_Void(context, (org.xtext.example.mydsl.myDsl.Void) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractElement returns AbstractElement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_AbstractElement(ISerializationContext context, AbstractElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ABSTRACT_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ABSTRACT_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAbstractElementAccess().getNameIDTerminalRuleCall_0_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns AllocationContext
	 *     AllocationContext returns AllocationContext
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         allocatedAssemblyContext+=[AssemblyContext|EString] 
	 *         allocatedAssemblyContext+=[AssemblyContext|EString]* 
	 *         (targetContainer+=[Container|EString] targetContainer+=[Container|EString]*)?
	 *     )
	 */
	protected void sequence_AllocationContext(ISerializationContext context, AllocationContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns AssemblyContext
	 *     AssemblyContext returns AssemblyContext
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (requiredRole+=[Role|EString] requiredRole+=[Role|EString]*)? 
	 *         allocationContext=[AllocationContext|EString]? 
	 *         (providedRole+=[Role|EString] providedRole+=[Role|EString]*)? 
	 *         (component+=[Component|EString] component+=[Component|EString]*)?
	 *     )
	 */
	protected void sequence_AssemblyContext(ISerializationContext context, AssemblyContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorDescription returns BehaviorDescription
	 *
	 * Constraint:
	 *     ((calledServices+=[Service|EString] calledServices+=[Service|EString]*)? internalActions=InternalAction? loops=Loop? branches=Branch?)
	 */
	protected void sequence_BehaviorDescription(ISerializationContext context, BehaviorDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Boolean
	 *     Boolean returns Boolean
	 *
	 * Constraint:
	 *     {Boolean}
	 */
	protected void sequence_Boolean(ISerializationContext context, org.xtext.example.mydsl.myDsl.Boolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Branch returns Branch
	 *
	 * Constraint:
	 *     {Branch}
	 */
	protected void sequence_Branch(ISerializationContext context, Branch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Char
	 *     Char returns Char
	 *
	 * Constraint:
	 *     {Char}
	 */
	protected void sequence_Char(ISerializationContext context, Char semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns ComplexType
	 *     ComplexType returns ComplexType
	 *
	 * Constraint:
	 *     {ComplexType}
	 */
	protected void sequence_ComplexType(ISerializationContext context, ComplexType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component_Impl returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (requiredInterface+=[Interface|EString] requiredInterface+=[Interface|EString]*)? 
	 *         (requiredService+=[Service|EString] requiredService+=[Service|EString]*)? 
	 *         (providedInterface+=[Interface|EString] providedInterface+=[Interface|EString]*)? 
	 *         (providedService+=[Service|EString] providedService+=[Service|EString]*)? 
	 *         behaviourDescription=BehaviorDescription?
	 *     )
	 */
	protected void sequence_Component_Impl(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Component
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=ID 
	 *             (requiredInterface+=[Interface|EString] requiredInterface+=[Interface|EString]*)? 
	 *             (requiredService+=[Service|EString] requiredService+=[Service|EString]*)? 
	 *             (providedInterface+=[Interface|EString] providedInterface+=[Interface|EString]*)? 
	 *             (providedService+=[Service|EString] providedService+=[Service|EString]*)? 
	 *             behaviourDescription=BehaviorDescription?
	 *         ) | 
	 *         (
	 *             name=ID 
	 *             (requiredInterface+=[Interface|EString] requiredInterface+=[Interface|EString]*)? 
	 *             (requiredService+=[Service|EString] requiredService+=[Service|EString]*)? 
	 *             (providedInterface+=[Interface|EString] providedInterface+=[Interface|EString]*)? 
	 *             (providedService+=[Service|EString] providedService+=[Service|EString]*)? 
	 *             behaviourDescription=BehaviorDescription? 
	 *             encapsulatedAssemblyContext=AssemblyContext?
	 *         )
	 *     )
	 */
	protected void sequence_Component_Impl_CompositeComponent(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CompositeComponent returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (requiredInterface+=[Interface|EString] requiredInterface+=[Interface|EString]*)? 
	 *         (requiredService+=[Service|EString] requiredService+=[Service|EString]*)? 
	 *         (providedInterface+=[Interface|EString] providedInterface+=[Interface|EString]*)? 
	 *         (providedService+=[Service|EString] providedService+=[Service|EString]*)? 
	 *         behaviourDescription=BehaviorDescription? 
	 *         encapsulatedAssemblyContext=AssemblyContext?
	 *     )
	 */
	protected void sequence_CompositeComponent(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Container
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (name=ID links+=[Link|EString] links+=[Link|EString]*)
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Date
	 *     Date returns Date
	 *
	 * Constraint:
	 *     {Date}
	 */
	protected void sequence_Date(ISerializationContext context, Date semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DelegationConnector returns DelegationConnector
	 *
	 * Constraint:
	 *     (role=[Role|EString] interface=[Interface|EString])
	 */
	protected void sequence_DelegationConnector(ISerializationContext context, DelegationConnector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DELEGATION_CONNECTOR__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DELEGATION_CONNECTOR__ROLE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DELEGATION_CONNECTOR__INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DELEGATION_CONNECTOR__INTERFACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelegationConnectorAccess().getRoleRoleEStringParserRuleCall_3_0_1(), semanticObject.eGet(MyDslPackage.Literals.DELEGATION_CONNECTOR__ROLE, false));
		feeder.accept(grammarAccess.getDelegationConnectorAccess().getInterfaceInterfaceEStringParserRuleCall_5_0_1(), semanticObject.eGet(MyDslPackage.Literals.DELEGATION_CONNECTOR__INTERFACE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Double
	 *     Double returns Double
	 *
	 * Constraint:
	 *     {Double}
	 */
	protected void sequence_Double(ISerializationContext context, org.xtext.example.mydsl.myDsl.Double semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Float
	 *     Float returns Float
	 *
	 * Constraint:
	 *     {Float}
	 */
	protected void sequence_Float(ISerializationContext context, org.xtext.example.mydsl.myDsl.Float semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Int
	 *     Int0 returns Int
	 *
	 * Constraint:
	 *     {Int}
	 */
	protected void sequence_Int0(ISerializationContext context, Int semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Interface
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (name=ID signature+=[Signature|EString] signature+=[Signature|EString]*)
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalAction returns InternalAction
	 *
	 * Constraint:
	 *     {InternalAction}
	 */
	protected void sequence_InternalAction(ISerializationContext context, InternalAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Link
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=ID linkedContainers+=[Container|EString] linkedContainers+=[Container|EString]*)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns List
	 *     List returns List
	 *
	 * Constraint:
	 *     {List}
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Long
	 *     Long returns Long
	 *
	 * Constraint:
	 *     {Long}
	 */
	protected void sequence_Long(ISerializationContext context, org.xtext.example.mydsl.myDsl.Long semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loop returns Loop
	 *
	 * Constraint:
	 *     {Loop}
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Map
	 *     Map returns Map
	 *
	 * Constraint:
	 *     {Map}
	 */
	protected void sequence_Map(ISerializationContext context, Map semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     greetings+=AbstractElement+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Role returns Role
	 *
	 * Constraint:
	 *     {Role}
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Service
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (name=ID correspondingSignature+=[Signature|EString] correspondingSignature+=[Signature|EString]*)
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Signature
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (name=ID returnType=Type? (parameterType+=[Type|EString] parameterType+=[Type|EString]*)?)
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns String
	 *     String0 returns String
	 *
	 * Constraint:
	 *     {String}
	 */
	protected void sequence_String0(ISerializationContext context, org.xtext.example.mydsl.myDsl.String semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns SystemEnvironment
	 *     SystemEnvironment returns SystemEnvironment
	 *
	 * Constraint:
	 *     (name=ID container+=[Container|EString] container+=[Container|EString]* (link+=[Link|EString] link+=[Link|EString]*)?)
	 */
	protected void sequence_SystemEnvironment(ISerializationContext context, SystemEnvironment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns System
	 *     System returns System
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         encapsulatedAssemblyContext+=[AssemblyContext|EString] 
	 *         encapsulatedAssemblyContext+=[AssemblyContext|EString]* 
	 *         allocationContext=[AllocationContext|EString]? 
	 *         (providedInterfaces+=[Interface|EString] providedInterfaces+=[Interface|EString]*)? 
	 *         environment=[SystemEnvironment|EString]
	 *     )
	 */
	protected void sequence_System(ISerializationContext context, org.xtext.example.mydsl.myDsl.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *     Type_Impl returns Type
	 *
	 * Constraint:
	 *     {Type}
	 */
	protected void sequence_Type_Impl(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Void
	 *     Void returns Void
	 *
	 * Constraint:
	 *     {Void}
	 */
	protected void sequence_Void(ISerializationContext context, org.xtext.example.mydsl.myDsl.Void semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
